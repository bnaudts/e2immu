/*
 * e2immu: a static code analyser for effective and eventual immutability
 * Copyright 2020-2021, Bart Naudts, https://www.e2immu.org
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details. You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = false;
        //html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

jar {
    from sourceSets.main.java
}

test {
    exclude '**/failing/*'

    maxHeapSize = "2G"
    useJUnitPlatform()
    maxParallelForks = 4
}

dependencies {
    implementation 'org.e2immu:e2immu-support:0.6.0'      // LGPL 3.0

    // implementation 'org.slf4j:slf4j-api:1.7.32'           // MIT X-11 License
    implementation 'ch.qos.logback:logback-classic:1.2.11' // EPL v1.0 and the LGPL 2.1

    implementation 'com.github.javaparser:javaparser-core:3.24.10'

    // LGPL or Apache License 2.0
    implementation 'org.ow2.asm:asm:9.4'                  // 3-clause BSD permissive license

    // TEST
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'                    // EPL v2.0
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

version = '0.6.0'
group 'org.e2immu'

publishing {
    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/e2immu/e2immu")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = 'org.e2immu'
            artifactId = 'analyser'
            from components.java

            pom {
                name = 'e2immu analyser'
                description = 'The e2immu static code analyser'
                url = 'http://www.e2immu.org'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, version 3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'bnaudts'
                        name = 'Bart Naudts'
                        email = 'bart.naudts@e2immu.org'
                    }
                }
            }
        }
        mavenJava(MavenPublication) {
            groupId = 'org.e2immu'
            artifactId = 'analyser'
            from components.java
        }
    }
}

// -------------------

// a bit of code to generate a list of all the tests that ran successfully
// will be picked up by the
class MyTestListener implements TestListener {
    Set<String> testFqns = new HashSet<>();
    File file;

    MyTestListener(File file) {
        this.file = file
        file.delete()
        file.createNewFile()
    }

    void beforeSuite(TestDescriptor testDescriptor) {}

    void afterSuite(TestDescriptor testDescriptor, TestResult testResult) {}

    void beforeTest(TestDescriptor testDescriptor) {}

    void afterTest(TestDescriptor testDescriptor, TestResult testResult) {
        if (testResult.resultType == TestResult.ResultType.SUCCESS && testFqns.add(testDescriptor.className))
            file << testDescriptor.className + "\n"
    }
}

tasks.withType(Test) {
    var l = new MyTestListener(new File("$buildDir/testFQNs.txt"))
    addTestListener(l)
}

// ----------------

class IterateOverTests extends DefaultTask {
    @InputFile
    File testFQNs

    @InputFile
    File testCoverageJar

    @InputFile
    File jacocoTestReportXml

    @OutputDirectory
    File jsonGzDir

    @InputDirectory
    File theProjectDir

    @TaskAction
    void runIterateOverTests() {
        logger.info("Test coverage jar ${testCoverageJar.path}")
        logger.info("Jacoco XML report ${jacocoTestReportXml.path}")

        jsonGzDir.delete()
        jsonGzDir.mkdirs()
        logger.info("Destination is ${jsonGzDir.path}")

        List<String> tests = testFQNs.readLines('UTF-8')

        tests.forEach {
            logger.info("Processing test $it")

            String cmd = "/usr/local/bin/gradle test --tests $it jacocoTestReport"
            execute(cmd, theProjectDir)

            String cmd2 = "/usr/bin/java -jar ${testCoverageJar.path} ${jacocoTestReportXml.path} ${jsonGzDir.path}/${it}.json.gz"
            logger.info("Executing translation to json: $cmd")

            execute(cmd2, new File("."))
        }
    }

    def execute(String cmd, File projectDir) {
        def noParams = [] as String[]
        def output = new StringBuilder(), error = new StringBuilder()
        def proc = cmd.execute(noParams, projectDir)
        proc.consumeProcessOutput(output, error)
        proc.waitForOrKill(3600_000)
        if (!output.isBlank()) {
            logger.info("----\n$output\n----\n")
        }
        if (!error.isBlank()) {
            logger.error("---- ERROR ----\n$error\n----\n")
        }
        if (proc.exitValue() != 0) {
            System.exit proc.exitValue()
        }
    }
}

configurations {
    iterate1
}

dependencies {
    iterate1 'com.codemodernizer:jacocoparser:0.0.1'
}

task iterateOverTests(type: IterateOverTests) {
    dependsOn test, jacocoTestReport

    testFQNs = new File(buildDir, "testFQNs.txt")
    testCoverageJar = configurations.iterate1.resolve()[0]
    jacocoTestReportXml = tasks.jacocoTestReport.reports.xml.outputLocation.getAsFile().get()
    jsonGzDir = new File(buildDir, "json.gz")
    theProjectDir = projectDir
}
