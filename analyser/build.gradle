/*
 * e2immu: a static code analyser for effective and eventual immutability
 * Copyright 2020-2021, Bart Naudts, https://www.e2immu.org
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details. You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

compileJava {
    options.compilerArgs.add("--enable-preview")
}

test {
    exclude '**/parserfailing/*.class'

    maxHeapSize = "2G"
    jvmArgs("--enable-preview")
    useJUnitPlatform()
}

compileTestJava {
    options.compilerArgs.add("--enable-preview")
}

dependencies {
    implementation group: 'org.e2immu', name: 'e2immu-support', version: '0.1.0'      // LGPL 3.0

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'           // MIT X-11 License
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3' // EPL v1.0 and the LGPL 2.1
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'            // Apache License 2.0

    implementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.18.0'
    // LGPL or Apache License 2.0
    implementation group: 'org.ow2.asm', name: 'asm', version: '9.0'                  // 3-clause BSD permissive license

    // TEST
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'                    // EPL v2.0
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

version = '0.1.0'

application {
    mainClass.set('org.e2immu.analyser.cli.Main')
}

/*
task generateAnnotationXml(type: JavaExec) {
    group = "Execution"
    description = "Convert all annotations in the annotatedAPIs to annotation.xml files"
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.e2immu.analyser.cli.Main'
    Set<File> reducedClassPath = sourceSets.main.runtimeClasspath.toList()
    reducedClassPath += sourceSets.test.runtimeClasspath
    reducedClassPath.removeIf({ f -> f.path.contains("build/classes") || f.path.contains("build/resources") })
    jvmArgs("--enable-preview")
    args('--classpath=' + reducedClassPath.join(":") + ":src/main/resources/annotatedAPIs:jmods/java.base.jmod",
            '--source=non_existing_dir',
            '-w',
            '--write-annotation-xml-dir=build/annotations',
            '--debug=INSPECT,ANNOTATION_XML_WRITER'
    )
}

task annotationXmlJar(type: Jar) {
    from(buildDir.path + "/annotations")
    archivesBaseName = buildDir.path + "/annotation-xml"

    dependsOn(generateAnnotationXml)
}

def annotationXmlJar = file(buildDir.path + "/annotation-xml-" + project.version + ".jar")
def annotationXmlArtifact = artifacts.add('archives', annotationXmlJar, {
    type ('jar')
    builtBy ('annotationXmlJar')
})
*/

// for now, we publish to maven local, so that we can use the plugin locally

publishing {
    repositories {
        mavenLocal()
    }
    publications {
        mavenLocal(MavenPublication) {
            groupId = 'e2immu'
            artifactId = 'analyser'

            from components.java
        }
/*
        mavenLocalXml(MavenPublication) {
           artifact annotationXmlArtifact
            groupId = 'org.e2immu'
            artifactId = 'annotation-xml'
        }

 */
    }
}
