/*
 * e2immu-analyser: code analyser for effective and eventual immutability
 * Copyright 2020, Bart Naudts, https://www.e2immu.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
}
/*
repositories {
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/bnaudts/e2immu-annot")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}
*/
java {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

compileJava {
    options.compilerArgs.add("--enable-preview")
}

test {
    maxHeapSize = "2G"
    jvmArgs("--enable-preview")
    useJUnitPlatform()
}

compileTestJava {
    options.compilerArgs.add("--enable-preview")
}

dependencies {
    implementation project(':annotations')

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'           // MIT X-11 License
    implementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.18.0'
    // LGPL or Apache License 2.0
    implementation group: 'org.ow2.asm', name: 'asm', version: '9.0'                  // 3-clause BSD permissive license
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'            // Apache License 2.0
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3' // EPL v1.0 and the LGPL 2.1

    // TEST
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

version = '0.0.1'

application {
    mainClassName = 'org.e2immu.analyser.cli.Main'
}

/*
task generateAnnotationXml(type: JavaExec) {
    group = "Execution"
    description = "Convert all annotations in the annotatedAPIs to annotation.xml files"
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.e2immu.analyser.cli.Main'
    Set<File> reducedClassPath = sourceSets.main.runtimeClasspath.toList()
    reducedClassPath += sourceSets.test.runtimeClasspath
    reducedClassPath.removeIf({ f -> f.path.contains("build/classes") || f.path.contains("build/resources") })
    jvmArgs("--enable-preview")
    args('--classpath=' + reducedClassPath.join(":") + ":src/main/resources/annotatedAPIs:jmods/java.base.jmod",
            '--source=non_existing_dir',
            '-w',
            '--write-annotation-xml-dir=build/annotations',
            '--debug=INSPECT,ANNOTATION_XML_WRITER'
    )
}

task annotationXmlJar(type: Jar) {
    from(buildDir.path + "/annotations")
    archivesBaseName = buildDir.path + "/annotation-xml"

    dependsOn(generateAnnotationXml)
}

def annotationXmlJar = file(buildDir.path + "/annotation-xml-" + project.version + ".jar")
def annotationXmlArtifact = artifacts.add('archives', annotationXmlJar, {
    type ('jar')
    builtBy ('annotationXmlJar')
})
*/

// for now, we publish to maven local, so that we can use the plugin locally

publishing {
    repositories {
        mavenLocal()
    }
    publications {
        mavenLocal(MavenPublication) {
            groupId = 'e2immu'
            artifactId = 'analyser'

            from components.java
        }
/*
        mavenLocalXml(MavenPublication) {
           artifact annotationXmlArtifact
            groupId = 'org.e2immu'
            artifactId = 'annotation-xml'
        }

 */
    }
}
