/*
 * e2immu-annot: annotations for effective and eventual immutability
 * Copyright 2020, Bart Naudts, https://www.e2immu.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * -------
 *
 * The content of this file reflects a part of the public API
 * of the Java SDK. The only intended contribution of the
 * e2immu-annot project is to annotate some of the the publicly accessible
 * classes, methods and fields. The fact that this file resembles the Java
 * syntax is only done to facilitate the description and storage of the association
 * between annotations and the publicly accessible API elements of the Java SDK.
 */
package java.util.function;

import org.e2immu.annotation.NotModified;
import org.e2immu.annotation.NotNull;
import org.e2immu.annotation.NullNotAllowed;

import java.util.Comparator;

// it is important to note that get cannot be marked @Independent, because a supplier
// is a simple way to link an object from the outside world to a field.

@FunctionalInterface
public interface Supplier<T> {
    @NotModified
    T get();
}

// it is important to note that accept cannot be marked @Independent, because a consumer
// is a simple way to expose a field to the outside world.

@FunctionalInterface
public interface Consumer<T> {
    @NotModified
    void accept(T t);

    Consumer<T> andThen(@NullNotAllowed Consumer<? super T> after);
}

@FunctionalInterface
public interface Predicate<T> {
    @NotModified
    boolean test(T t);
}

@FunctionalInterface
public interface Function<T, R> {
    @NotModified
    R apply(T t);

    @NotNull
    <V> Function<T, V> andThen(@NullNotAllowed Function<? super R, ? extends V> after);

    @NotNull
    <V> Function<V, R> compose(@NullNotAllowed Function<? super V, ? extends T> before);

    @NotNull
    static <T> Function<T, T> identity();
}

@FunctionalInterface
public interface BiFunction<T, U, R> {

    @NotModified
    R apply(T t, U u);

    <V> BiFunction<T, U, V> andThen(Function<? super R, ? extends V> after);
}

@FunctionalInterface
public interface BinaryOperator<T> extends BiFunction<T, T, T> {

    static <T> BinaryOperator<T> mayBy(Comparator<? super T> comparator);
    static <T> BinaryOperator<T> minBy(Comparator<? super T> comparator);
}

@FunctionalInterface
public interface BiConsumer<T, U> {
    @NotModified
    void accept(T t, U u);

    @NotNull
    BiConsumer<T, U> andThen(@NullNotAllowed BiConsumer<? super T, ? super U> after);
}

@FunctionalInterface
public interface ToIntFunction<R> {
    @NotModified
    int applyAsInt(R value);
}

@FunctionalInterface
public interface IntFunction<R> {
    @NotModified
    R apply(int value);
}