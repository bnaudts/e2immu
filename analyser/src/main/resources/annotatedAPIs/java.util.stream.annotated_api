/*
 * e2immu-annot: annotations for effective and eventual immutability
 * Copyright 2020, Bart Naudts, https://www.e2immu.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * -------
 *
 * The content of this file reflects a part of the public API
 * of the Java SDK. The only intended contribution of the
 * e2immu-annot project is to annotate some of the the publicly accessible
 * classes, methods and fields. The fact that this file resembles the Java
 * syntax is only done to facilitate the description and storage of the association
 * between annotations and the publicly accessible API elements of the Java SDK.
 */
package java.util.stream;

import org.e2immu.annotation.*;

import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.*;

public interface Collector<T, A, R> {
    @NotNull1
    Supplier<A> supplier();

    @NotNull
    BiConsumer<A, T> accumulator();

    @NotNull1
    BinaryOperator<A> combiner();

    @NotNull1
    Function<A, R> finisher();
}

@UtilityClass
public class Collectors {
    @NotNull1
    static Collector<CharSequence, ?, String> joining();

    @NotNull1
    static Collector<CharSequence, ?, String> joining(@NotNull CharSequence delimiter);

    @NotNull1
    static <T> Collector<T, ?, Set<T>> toSet();

    @NotNull1
    static <T> Collector<T, ?, List<T>> toList();
}

@NotNull
@E2Container
public interface IntStream {
    long count();
    int sum();
    IntStream sorted();
}

@NotNull
@E2Container
public interface Stream<T> {

    <R> Stream<R> map(Function<? super T, ? extends R> mapper);

    <R, A> R collect(Collector<? super T, A, R> collector);

    Stream<T> filter(Predicate<? super T> predicate);

    IntStream mapToInt(ToIntFunction<? super T> mapper);

    Optional<T> min(Comparator<? super T> comparator);
}