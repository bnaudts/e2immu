
package io.vertx.core;

import org.e2immu.annotation.*;

import io.vertx.core.http.HttpClient;
import java.util.Set;

interface Closeable {
    void close(@NullNotAllowed Handler<AsyncResult<Void>> handler);
}

// Container: all parameters are implicitly @NotModified
@Container
interface Vertx {
    boolean cancelTimer(long id);

    void close();

    // will call deploymentManager.deployVerticle(verticle, options), which will call first init(), then start()
    void deployVerticle(Verticle verticle);

    HttpClient createHttpClient();

    @NotModified
    Set<String> deploymentIDs();

    void undeploy(String deploymentID);
}

@Container
interface Context {

    void addCloseHook(Closeable hook);

    @NotModified
    JsonObject config();

    @NotModified
    String deploymentId();

    @NotModified
    Handler<Throwable> exceptionHandler();

    @Fluent
    Context exceptionHandler(Handler<Throwable> handler);

    @NotModified
    <T> T get(String key);

    @NotModified
    Vertx owner();

    void put(String key, Object value);

    boolean remove(String key);

    boolean removeCloseHook(Closeable hook);
}

@FunctionalInterface
public interface Handler<E> {
    void handle(E event);
}

@E2Final
public interface AsyncResult<T> {
    T result();
    Throwable cause();
    boolean succeeded();
    boolean failed();
}

@Container
@NullNotAllowed
public interface Promise<T> extends Handler<AsyncResult<T>> {
    void handle(AsyncResult<T> asyncResult);

    void complete(T result);
    void complete();

    void fail(Throwable cause);
    void fail(String message);

    boolean tryComplete(T result);
    boolean tryComplete();

    boolean tryFail(Throwable cause);
    boolean tryFail(String message);

    Future<T> future();
}

@Container
public interface Future<T> extends AsyncResult<T>, Handler<AsyncResult<T>> {
    @NotModified
    Throwable cause();

    @NotModified
    boolean failed();

    @Fluent
    Future<T> onComplete(Handler<AsyncResult<T>> handler);

    boolean tryComplete(T result);

    @NotModified
    boolean succeeded();
}

// Verticle is not a container, as its code may want to modify the context
@E2Final(after = "init")
@NullNotAllowed
interface Verticle {

    @Mark("init")
    @Only(framework = true)
    void init(@NotModified Vertx vertx, @NotModified Context context);

    @Only(after = "init")
    @NotModified
    Vertx getVertx();

    @Only(after = "init", framework = true)
    void start(Promise<Void> startPromise) throws Exception;

    @Only(after = "init", framework = true)
    void stop(Promise<Void> stopPromise) throws Exception;
}
