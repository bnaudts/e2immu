#
# e2immu: a static code analyser for effective and eventual immutability
# Copyright 2020-2021, Bart Naudts, https://www.e2immu.org
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details. You should have received a copy of the GNU Lesser General Public
# License along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
ANNOTATION_ABSENT=Annotatie ontbreekt
ANNOTATION_UNEXPECTEDLY_PRESENT=Annotatie mag niet aanwezig zijn
ASSERT_EVALUATES_TO_CONSTANT_FALSE=De conditie in 'assert' is altijd vals
ASSERT_EVALUATES_TO_CONSTANT_TRUE=De conditie in 'assert' is altijd waar
ASSIGNMENT_TO_CURRENT_VALUE=Toekenning van de huidige waarde
ASSIGNMENT_TO_FIELD_OUTSIDE_TYPE=Een veld wordt toegekend buiten zijn type
ASSIGNMENT_TO_SELF=Variabele aan zichzelf toegekend
CALLING_MODIFYING_METHOD_ON_E2IMMU=Een wijzigende methode wordt aangeroepen op een niveau 2 onwijzigbaar type
CIRCULAR_TYPE_DEPENDENCY=Circulaire afhankelijkheid werd gedetecteerd; dit heeft een effect op de berekening van wijzigingen
CONDITION_EVALUATES_TO_CONSTANT_ENN=De conditie in een 'if' of 'switch' uitdrukking is steeds een constante (berekend via @NotNull op een veld)
CONDITION_EVALUATES_TO_CONSTANT=De conditie in een 'if' of 'switch' uitdrukking is steeds een constante
CONTRADICTING_ANNOTATIONS=Annotaties spreken mekaar tegen
DIVISION_BY_ZERO=Deling door nul
DUPLICATE_MARK_CONDITION=Meerdere, duplicerende precondities voor @Mark
EMPTY_LOOP=Lege lus
EVENTUAL_AFTER_REQUIRED=Calling a method requiring @Only(after) on an object in state @Only(before)
EVENTUAL_BEFORE_REQUIRED=Calling a method requiring @Only(before) on an object in state @Only(after)
FIELD_INITIALIZATION_NOT_NULL_CONFLICT=Er is minstens één manier van initializeren in conflict met de @NotNull-beperking van dit veld
FINALIZER_METHOD_CALLED_ON_FIELD_NOT_IN_FINALIZER=@Finalizer methode mag op een veld enkel in een @Finalizer methode aangeroepen worden
FINALIZER_METHOD_CALLED_ON_PARAMETER=@Finalizer methode mag niet aangeroepen worden op een parameter
IGNORING_RESULT_OF_METHOD_CALL=Het resultaat van een methode-aanroep wordt genegeerd
INCOMPATIBLE_IMMUTABILITY_CONTRACT_AFTER=@ExImmutable als contract, maar het formele type is niet (eventueel) @ExImmutable
INCOMPATIBLE_IMMUTABILITY_CONTRACT_BEFORE=Incompatible immutability contract: Contracted to be @ExImmutable @BeforeMark, formal type is not eventually @ExImmutable
INCOMPATIBLE_IMMUTABILITY_CONTRACT_BEFORE_NOT_EVENTUALLY_IMMUTABLE=Incompatible immutability contract: Contracted to be @BeforeMark, formal type is not eventually immutable
INCOMPATIBLE_PRECONDITION=Precondities spreken mekaar tegen
INCONSISTENT_INDEPENDENCE_VALUE=Waarde voor onafhankelijkheid van type niet consistent
INFINITE_LOOP_CONDITION=Condities van de lus wijzen op een oneindige lus
INLINE_CONDITION_EVALUATES_TO_CONSTANT=De conditie van de ?: inline-operator is steeds een constante
INTERRUPT_IN_LOOP=De lus wordt vroegtijdig onderbroken; de analyser houdt hier geen rekening mee
LOOP_ONCE=Lus wordt maar één keer uitgevoerd
METHOD_HAS_LOWER_VALUE_FOR_INDEPENDENT=Method override heeft een lagere @Independent-waarde
METHOD_SHOULD_BE_MARKED_STATIC=Deze method moet met 'static' gemarkeerd worden
MODIFICATION_NOT_ALLOWED=Vermoeden dat een modificerende methode-aanroep gebeurt waar het niet mag
NON_PRIVATE_FIELD_NOT_FINAL=Non-private veld moet @Final zijn (mag niet variabel zijn)
NULL_POINTER_EXCEPTION=Gegarandeerde null pointer exception
ONLY_WRONG_MARK_LABEL=@Only annotatie heeft een verkeerde @Mark beschrijving
OVERWRITING_PREVIOUS_ASSIGNMENT=Overschrijven van eerdere toekenning
PARAMETER_SHOULD_NOT_BE_ASSIGNED_TO=Best geen waarden toekennen aan parameters
PART_OF_EXPRESSION_EVALUATES_TO_CONSTANT=Een deel van de booleaanse uitdrukking is steeds een constante
POTENTIAL_NULL_POINTER_EXCEPTION=Mogelijke null pointer exception
PRECONDITION_ABSENT=Preconditie ontbreekt
PRIVATE_FIELD_NOT_READ=Een privaat veld wordt niet gelezen buiten de constructors
TRIVIAL_CASES_IN_SWITCH=De switch uitdrukking bevat triviale gevallen
TYPES_WITH_FINALIZER_ONLY_EFFECTIVELY_FINAL=Velden van types met een @Finalizer methode mogen enkel toegewezen worden aan velden die @Final zijn
TYPE_ANALYSIS_NOT_AVAILABLE=Type analysis nog niet aanwezig
TYPE_HAS_HIGHER_VALUE_FOR_INDEPENDENT=Overriding type heeft een hogere @Independent-waarde
UNNECESSARY_FIELD_INITIALIZER=Overbodige initialisatie van een veld
UNNECESSARY_METHOD_CALL=Onnodige methode-aanroep
UNREACHABLE_STATEMENT=Onbereikbare uitdrukking
UNUSED_LOCAL_VARIABLE=Ongebruikte lokale variabele
UNUSED_LOOP_VARIABLE=Ongebruikte lus-variabele
UNUSED_PARAMETER=Ongebruikte parameter
USELESS_ASSIGNMENT=Onnuttige uitdrukking
WORSE_THAN_IMPLEMENTED_INTERFACE=De waarde van de eigenschap van het type is minder dan die van één van de geïmplementeerde interfaces
WORSE_THAN_OVERRIDDEN_METHOD_PARAMETER=De waarde van de eigenschap van de parameter is minder dan die van dezelfde parameter in de overschreven methode
WORSE_THAN_OVERRIDDEN_METHOD=De waarde van de eigenschap is minder dan die van de overschreven methode
WRONG_ANNOTATION_PARAMETER=Parameter van de annotatie is verkeerd
WRONG_PRECONDITION=Verkeerde preconditie
