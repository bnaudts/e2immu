<!--
  ~ e2immu: a static code analyser for effective and eventual immutability
  ~ Copyright 2020-2021, Bart Naudts, https://www.e2immu.org
  ~
  ~ This program is free software: you can redistribute it and/or modify it under the
  ~ terms of the GNU Lesser General Public License as published by the Free Software
  ~ Foundation, either version 3 of the License, or (at your option) any later version.
  ~ This program is distributed in the hope that it will be useful, but WITHOUT ANY
  ~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  ~ FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
  ~ more details. You should have received a copy of the GNU Lesser General Public
  ~ License along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<root>
  <item name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater V get(T) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater V getAndSet(T, V) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater boolean compareAndSet(T, V, V) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater boolean weakCompareAndSet(T, V, V) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater java.util.concurrent.atomic.AtomicReferenceFieldUpdater&lt;U,W&gt; newUpdater(java.lang.Class&lt;U&gt;, java.lang.Class&lt;W&gt;, java.lang.String)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater java.util.concurrent.atomic.AtomicReferenceFieldUpdater&lt;U,W&gt; newUpdater(java.lang.Class&lt;U&gt;, java.lang.Class&lt;W&gt;, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater java.util.concurrent.atomic.AtomicReferenceFieldUpdater&lt;U,W&gt; newUpdater(java.lang.Class&lt;U&gt;, java.lang.Class&lt;W&gt;, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater java.util.concurrent.atomic.AtomicReferenceFieldUpdater&lt;U,W&gt; newUpdater(java.lang.Class&lt;U&gt;, java.lang.Class&lt;W&gt;, java.lang.String) 2'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater void lazySet(T, V) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.concurrent.atomic.AtomicReferenceFieldUpdater void set(T, V) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
</root>