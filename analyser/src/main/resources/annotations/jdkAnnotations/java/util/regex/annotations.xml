<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ e2immu: a static code analyser for effective and eventual immutability
  ~ Copyright 2020-2021, Bart Naudts, https://www.e2immu.org
  ~
  ~ This program is free software: you can redistribute it and/or modify it under the
  ~ terms of the GNU Lesser General Public License as published by the Free Software
  ~ Foundation, either version 3 of the License, or (at your option) any later version.
  ~ This program is distributed in the hope that it will be useful, but WITHOUT ANY
  ~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  ~ FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
  ~ more details. You should have received a copy of the GNU Lesser General Public
  ~ License along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<root>
  <item name='java.util.regex.Matcher boolean find()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher boolean find(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher boolean lookingAt()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher boolean matches()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher int end(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher int start(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher java.lang.String group()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher java.lang.String group(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher java.lang.String group(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher java.lang.String replaceAll(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher java.lang.String replaceFirst(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.regex.Matcher java.lang.String replaceFirst(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.regex.Matcher java.lang.StringBuffer appendTail(java.lang.StringBuffer)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;param1&quot;"/>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_-&gt;this&quot;"/>
      <val name="mutates" val="&quot;this,param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher java.util.regex.Matcher reset()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;-&gt;this&quot;"/>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.regex.Matcher java.util.regex.Matcher reset(java.lang.CharSequence)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;this&quot;"/>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.regex.Pattern boolean matches(java.lang.String, java.lang.CharSequence) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.regex.Pattern int flags()">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.regex.Pattern.class" />
    </annotation>
  </item>
  <item name='java.util.regex.Pattern java.util.regex.Matcher matcher(java.lang.CharSequence)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.regex.Pattern java.util.regex.Matcher matcher(java.lang.CharSequence) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NonNls" />
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NonNls" />
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.regex.Pattern.class" />
    </annotation>
  </item>
</root>

